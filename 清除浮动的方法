1.给父元素设置overflow:hidden（不建议使用）
  <div class="wrap" id="float3" style="overflow:hidden; *zoom:1;">
  <h2>3)父元素设置 overflow </h2>
  <div class="main left">.main{float:left;}</div>
  <div class="side left">.side{float:right;}</div>
  </div>
  <div class="footer">.footer</div>
  优点：不存在结构和语义化问题，代码量极少；
  缺点：内容增多时容易造成不会自动换行导致内容被隐藏，无法显示需要溢出的内容；
2.父元素也使用浮动（不推荐使用）
  优点：不存在结构和语义化问题，代码量极少；
  缺点：使得与父元素相邻的元素的布局会受到影响，不可能一直浮动到body；
3.父元素设置display:table（不推荐使用）
  优点：结构和语义完全正确，代码量极少；
  缺点：改变了盒模型属性；
4.使用：after伪元素（推荐使用）
  .clearfix:after {content:"."; display:block; height:0; visibility:hidden; clear:both; }
  .clearfix { *zoom:1; }
  1) display:block 使生成的元素以块级元素显示,占满剩余空间;
  2) height:0 避免生成内容破坏原有布局的高度。
  3) visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;
  4）通过 content:"."生成内容作为最后一个元素，至于content里面是点还是其他都是可以的，例如oocss里面就有经典的 content:"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",有些版本可能content 里面内容为空,一丝冰凉是不推荐这样做的,firefox直到7.0 content:”" 仍然会产生额外的空隙；
  5）zoom：1 触发IE hasLayout。
  通过分析发现，除了clear：both用来闭合浮动的，其他代码无非都是为了隐藏掉content生成的内容，这也就是其他版本的闭合浮动为什么会有font-size：0，line-height：0。
  精益求精方案一：
  相对于空标签闭合浮动的方法代码似乎还是有些冗余，通过查询发现Unicode字符里有一个“零宽度空格”，也就是U+200B ，这个字符本身是不可见的，所以我们完全可以省略掉 visibility:hidden了
  .clearfix:after {content:"200B"; display:block; height:0; clear:both; }
  .clearfix { *zoom:1; }.
  精益求精方案二：
  由Nicolas Gallagher 大湿提出来的,原文:A new micro clearfix hack，该方法也不存在firefox中空隙的问题。
  /* For modern browsers */
  .cf:before,.cf:after {
  content:"";
  display:table;
  }
  .cf:after { clear:both; }/* For IE 6/7 (trigger hasLayout) */
  .cf { zoom:1; }
